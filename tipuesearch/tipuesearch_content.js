var tipuesearch = {"pages": [
     {"title": "BrookExtra", "text": "   ", "tags": "", "url": "BrookExtra.html"},
     {"title": "BrookExtra.BROOK_POST_BUFFER_SIZE", "text": "   ", "tags": "", "url": "BrookExtra.html#BROOK_POST_BUFFER_SIZE"},
     {"title": "BrookExtra.BROOK_PAYLOAD_LIMIT", "text": "   ", "tags": "", "url": "BrookExtra.html#BROOK_PAYLOAD_LIMIT"},
     {"title": "BrookExtra.BROOK_UPLOADS_LIMIT", "text": "   ", "tags": "", "url": "BrookExtra.html#BROOK_UPLOADS_LIMIT"},
     {"title": "BrookExtra.BROOK_BACKLOG", "text": "   ", "tags": "", "url": "BrookExtra.html#BROOK_BACKLOG"},
     {"title": "BrookExtra.BROOK_MIN_BUFFER_SIZE", "text": "   ", "tags": "", "url": "BrookExtra.html#BROOK_MIN_BUFFER_SIZE"},
     {"title": "BrookExtra.BROOK_BUFFER_SIZE", "text": "   ", "tags": "", "url": "BrookExtra.html#BROOK_BUFFER_SIZE"},
     {"title": "BrookExtra.BROOK_FILE_RIGHTS", "text": "   ", "tags": "", "url": "BrookExtra.html#BROOK_FILE_RIGHTS"},
     {"title": "BrookExtra.BROOK_CT_TEXT_PLAIN", "text": "   ", "tags": "", "url": "BrookExtra.html#BROOK_CT_TEXT_PLAIN"},
     {"title": "BrookExtra.BROOK_CT_OCTET_STREAM", "text": "   ", "tags": "", "url": "BrookExtra.html#BROOK_CT_OCTET_STREAM"},
     {"title": "BrookHandledClasses", "text": "   ", "tags": "", "url": "BrookHandledClasses.html"},
     {"title": "BrookHandledClasses.TBrookHandledPersistent", "text": "   ", "tags": "", "url": "BrookHandledClasses.TBrookHandledPersistent.html"},
     {"title": "BrookHandledClasses.TBrookHandledPersistent.Handle", "text": "   ", "tags": "", "url": "BrookHandledClasses.TBrookHandledPersistent.html#Handle"},
     {"title": "BrookHandledClasses.TBrookHandledCollectionItem", "text": "   ", "tags": "", "url": "BrookHandledClasses.TBrookHandledCollectionItem.html"},
     {"title": "BrookHandledClasses.TBrookHandledCollectionItem.Handle", "text": "   ", "tags": "", "url": "BrookHandledClasses.TBrookHandledCollectionItem.html#Handle"},
     {"title": "BrookHandledClasses.TBrookHandledOwnedCollection", "text": "   ", "tags": "", "url": "BrookHandledClasses.TBrookHandledOwnedCollection.html"},
     {"title": "BrookHandledClasses.TBrookHandledOwnedCollection.Handle", "text": "   ", "tags": "", "url": "BrookHandledClasses.TBrookHandledOwnedCollection.html#Handle"},
     {"title": "BrookHandledClasses.TBrookHandledComponent", "text": "   ", "tags": "", "url": "BrookHandledClasses.TBrookHandledComponent.html"},
     {"title": "BrookHandledClasses.TBrookHandledComponent.Handle", "text": "   ", "tags": "", "url": "BrookHandledClasses.TBrookHandledComponent.html#Handle"},
     {"title": "BrookHTTPAuthentication", "text": "   ", "tags": "", "url": "BrookHTTPAuthentication.html"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials", "text": "   ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPCredentials.html"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials.Create", "text": "   AHandle[in] Authentication handle. AHandle[in] Authentication handle. ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPCredentials.html#Create"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials.Realm", "text": "   ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPCredentials.html#Realm"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials.UserName", "text": "   ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPCredentials.html#UserName"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPCredentials.Password", "text": "   ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPCredentials.html#Password"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication", "text": "   ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Create", "text": "   AHandle[in] Authentication handle. AHandle[in] Authentication handle. ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Create"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Destroy", "text": "    ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Destroy"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Deny", "text": "     AReason[in] Denial reason. AContentType[in] Content type. AStatus[in] HTTP status code. AReason[in] Denial reason. AContentType[in] Content type. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Deny"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Deny", "text": "      AFmt[in] Formatted string. AArgs[in] Arguments to compose the formatted reason. AContentType[in] Content type. AStatus[in] HTTP status code. AFmt[in] Formatted string. AArgs[in] Arguments to compose the formatted reason. AContentType[in] Content type. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Deny"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Deny", "text": "    AReason[in] Denial reason. AContentType[in] Content type. AReason[in] Denial reason. AContentType[in] Content type. ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Deny"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Deny", "text": "     AFmt[in] Formatted string. AArgs[in] Arguments to compose the formatted reason. AContentType[in] Content type. AFmt[in] Formatted string. AArgs[in] Arguments to compose the formatted reason. AContentType[in] Content type. ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Deny"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Cancel", "text": "    ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Cancel"},
     {"title": "BrookHTTPAuthentication.TBrookHTTPAuthentication.Credentials", "text": "   ", "tags": "", "url": "BrookHTTPAuthentication.TBrookHTTPAuthentication.html#Credentials"},
     {"title": "BrookHTTPAuthentication.SBrookInvalidHTTPStatus", "text": "   ", "tags": "", "url": "BrookHTTPAuthentication.html#SBrookInvalidHTTPStatus"},
     {"title": "BrookHTTPCookies", "text": "   ", "tags": "", "url": "BrookHTTPCookies.html"},
     {"title": "BrookHTTPCookies.EBrookHTTPCookie", "text": "   ", "tags": "", "url": "BrookHTTPCookies.EBrookHTTPCookie.html"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Create", "text": "   ACollection[in] Cookies list. ACollection[in] Cookies list. ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Create"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Assign", "text": "   ASource[in] Cookie source to be copied. ASource[in] Cookie source to be copied. ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Assign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Sign", "text": "     ASecret[in] Secret key to sign the cookie value. AUnsignedValue[in] Unsigned cookie value to be signed. ASecret[in] Secret key to sign the cookie value. AUnsignedValue[in] Unsigned cookie value to be signed. Signed cookie value.", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Sign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.TryUnsign", "text": "      ASecret[in] Secret key to unsign the cookie value. ASignedValue[out] Signed cookie value. AUnsignedValue[out] Unsigned cookie value. ASecret[in] Secret key to unsign the cookie value. ASignedValue[out] Signed cookie value. AUnsignedValue[out] Unsigned cookie value. True if cookie value is unsigned successfully.", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#TryUnsign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Unsign", "text": "     ASecret[in] Secret key to unsign the cookie value. ASignedValue[in] Signed cookie value. ASecret[in] Secret key to unsign the cookie value. ASignedValue[in] Signed cookie value. Unsigned cookie value.", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Unsign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.IsSigned", "text": "    ASignedValue[out] Signed cookie value. ASignedValue[out] Signed cookie value. True if cookie value is signed.", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#IsSigned"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.IsSigned", "text": "     True if cookie is signed.", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#IsSigned"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Sign", "text": "   ASecret[in] Secret key to sign the cookie value. ASecret[in] Secret key to sign the cookie value. ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Sign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.TryUnsign", "text": "    ASecret[in] Secret key to unsign the cookie value. ASecret[in] Secret key to unsign the cookie value. True if cookie is unsigned successfully.", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#TryUnsign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Unsign", "text": "   ASecret[in] Secret key to unsign the cookie value. ASecret[in] Secret key to unsign the cookie value. ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Unsign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.ToString", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#ToString"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Clear", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Clear"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Expire", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Expire"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Persist", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Persist"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Name", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Name"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Value", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Value"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Domain", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Domain"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Path", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Path"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Expires", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Expires"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.HttpOnly", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#HttpOnly"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.Secure", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#Secure"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.MaxAge", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#MaxAge"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookie.SameSite", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookie.html#SameSite"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.html"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.GetCurrent", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.html#GetCurrent"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.Current", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookiesEnumerator.html#Current"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Create", "text": "   AOwner[in] Cookies persistent. AOwner[in] Cookies persistent. ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#Create"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.GetCookieClass", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#GetCookieClass"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Assign", "text": "   ASource[in] Cookies source to be copied. ASource[in] Cookies source to be copied. ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#Assign"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.GetEnumerator", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#GetEnumerator"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Add", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#Add"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Remove", "text": "   AName[in] Cookie name. AName[in] Cookie name. ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#Remove"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.IndexOf", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#IndexOf"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Find", "text": "   AName[in] Cookie name. AName[in] Cookie name. ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#Find"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.First", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#First"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Last", "text": "    ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#Last"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookies.Items", "text": "   ", "tags": "", "url": "BrookHTTPCookies.TBrookHTTPCookies.html#Items"},
     {"title": "BrookHTTPCookies.BROOK_COOKIE_SIG_PREFIX", "text": "   ", "tags": "", "url": "BrookHTTPCookies.html#BROOK_COOKIE_SIG_PREFIX"},
     {"title": "BrookHTTPCookies.BROOK_COOKIE_NAME_PREFIX", "text": "   ", "tags": "", "url": "BrookHTTPCookies.html#BROOK_COOKIE_NAME_PREFIX"},
     {"title": "BrookHTTPCookies.SBrookEmptyCookieName", "text": "   ", "tags": "", "url": "BrookHTTPCookies.html#SBrookEmptyCookieName"},
     {"title": "BrookHTTPCookies.SBrookInvalidCookieName", "text": "   ", "tags": "", "url": "BrookHTTPCookies.html#SBrookInvalidCookieName"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookieSameSite", "text": "    ssNone The browser will send cookies with both cross-site requests and same-site requests.   ssStrict The browser will only send cookies for same-site requests.   ssLax Same-site cookies are withheld on cross-site subrequests, but will be sent when a user navigates to the URL from an external site.  ", "tags": "", "url": "BrookHTTPCookies.html#TBrookHTTPCookieSameSite"},
     {"title": "BrookHTTPCookies.TBrookHTTPCookieClass", "text": "   ", "tags": "", "url": "BrookHTTPCookies.html#TBrookHTTPCookieClass"},
     {"title": "BrookHTTPRequest", "text": "   ", "tags": "", "url": "BrookHTTPRequest.html"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Create", "text": "   AHandle[in] Request handle. AHandle[in] Request handle. ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Create"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Destroy", "text": "    ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Destroy"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsPost", "text": "    ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#IsPost"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsFavicon", "text": "    ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#IsFavicon"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsSecure", "text": "    ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#IsSecure"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsCachable", "text": "    ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#IsCachable"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsXhr", "text": "    ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#IsXhr"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Isolate", "text": "    AProc[in] Procedure to handle requests and responses isolated from the main event loop. AUserData[in] User-defined data. AProc[in] Procedure to handle requests and responses isolated from the main event loop. AUserData[in] User-defined data. ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Isolate"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.ServerHandle", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#ServerHandle"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Headers", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Headers"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Cookies", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Cookies"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Params", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Params"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Fields", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Fields"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Payload", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Payload"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Version", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Version"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Method", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Method"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Path", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Path"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IP", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#IP"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.ContentType", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#ContentType"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.UserAgent", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#UserAgent"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Referer", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Referer"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Paths", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Paths"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsIsolated", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#IsIsolated"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.IsUploading", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#IsUploading"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Uploads", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Uploads"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Files", "text": " This is an alias to property Uploads.   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Files"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.Client", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#Client"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.TLSSession", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#TLSSession"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequest.UserData", "text": "   ", "tags": "", "url": "BrookHTTPRequest.TBrookHTTPRequest.html#UserData"},
     {"title": "BrookHTTPRequest.TBrookHTTPRequestIsolatedProc", "text": "    ", "tags": "", "url": "BrookHTTPRequest.html#TBrookHTTPRequestIsolatedProc"},
     {"title": "BrookHTTPResponse", "text": "   ", "tags": "", "url": "BrookHTTPResponse.html"},
     {"title": "BrookHTTPResponse.EBrookHTTPResponse", "text": "   ", "tags": "", "url": "BrookHTTPResponse.EBrookHTTPResponse.html"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse", "text": "   ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Create", "text": "   AHandle[in] Request handle. AHandle[in] Request handle. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Create"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Destroy", "text": "    ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Destroy"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SetCookie", "text": "    AName[in] Cookie name. AValue[in] Cookie value. AName[in] Cookie name. AValue[in] Cookie value. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SetCookie"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Send", "text": "     AValue[in] String to be sent. AContentType[in] Content type. AStatus[in] HTTP status code. AValue[in] String to be sent. AContentType[in] Content type. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Send"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendFmt", "text": "      AFmt[in] Format string. AArgs[in] Arguments to compose the formatted string. AContentType[in] Content type. AStatus[in] HTTP status code. AFmt[in] Format string. AArgs[in] Arguments to compose the formatted string. AContentType[in] Content type. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendFmt"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendBinary", "text": "      ABinary[in] Binary content to be sent. ASize[in] Content size. AContentType[in] Content type. AStatus[in] HTTP status code. ABinary[in] Binary content to be sent. ASize[in] Content size. AContentType[in] Content type. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendBinary"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendBytes", "text": "      ABytes[in] Array of Bytes to be sent. ASize[in] Content size. AContentType[in] Content type. AStatus[in] HTTP status code. ABytes[in] Array of Bytes to be sent. ASize[in] Content size. AContentType[in] Content type. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendBytes"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendFile", "text": "        ASize[in] Size of the file to be sent. Use zero to calculate automatically. AMaxSize[in] Maximum allowed file size. Use zero for no limit. AOffset[in] Offset to start reading from in the file to be sent. AFileName[in] Path of the file to be sent. ADownloaded[in] If True it offers the file as download. AStatus[in] HTTP status code. ASize[in] Size of the file to be sent. Use zero to calculate automatically. AMaxSize[in] Maximum allowed file size. Use zero for no limit. AOffset[in] Offset to start reading from in the file to be sent. AFileName[in] Path of the file to be sent. ADownloaded[in] If True it offers the file as download. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendFile"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendStream", "text": "     AStream[in] Stream to be sent. AFreed[in] True frees the stream automatically as soon as it is sent. AStatus[in] HTTP status code. AStream[in] Stream to be sent. AFreed[in] True frees the stream automatically as soon as it is sent. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendStream"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendStream", "text": " The stream is freed automatically as soon as it is sent.    AStream[in] Stream to be sent. AStatus[in] HTTP status code. AStream[in] Stream to be sent. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendStream"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendEmpty", "text": "   AContentType[in] Content type. AContentType[in] Content type. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendEmpty"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendEmpty", "text": "    ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendEmpty"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendAndRedirect", "text": "      AValue[in] String to be sent. ADestination[in] Destination to which it will be redirected as soon as the content is sent. AContentType[in] Content type. AStatus[in] HTTP status code (must be &gt;=300 and &lt;=307). AValue[in] String to be sent. ADestination[in] Destination to which it will be redirected as soon as the content is sent. AContentType[in] Content type. AStatus[in] HTTP status code (must be &gt;=300 and &lt;=307). ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendAndRedirect"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.SendAndRedirect", "text": "     AValue[in] String to be sent. ADestination[in] Destination to which it will be redirected as soon as the content is sent. AContentType[in] Content type. AValue[in] String to be sent. ADestination[in] Destination to which it will be redirected as soon as the content is sent. AContentType[in] Content type. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#SendAndRedirect"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Download", "text": "    AFileName[in] Path of the file to be sent. AStatus[in] HTTP status code. AFileName[in] Path of the file to be sent. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Download"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Render", "text": "    AFileName[in] Path of the file to be sent. AStatus[in] HTTP status code. AFileName[in] Path of the file to be sent. AStatus[in] HTTP status code. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Render"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Download", "text": "   AFileName[in] Path of the file to be sent. AFileName[in] Path of the file to be sent. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Download"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Render", "text": "   AFileName[in] Path of the file to be sent. AFileName[in] Path of the file to be sent. ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Render"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Reset", "text": "    ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Reset"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Clear", "text": "    ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Clear"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.IsEmpty", "text": "    ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#IsEmpty"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Compressed", "text": " The compression is done by the ZLib library using the DEFLATE compression algorithm. It uses the Gzip format when the content is a file.   ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Compressed"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Headers", "text": "   ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Headers"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Cookies", "text": "   ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Cookies"},
     {"title": "BrookHTTPResponse.TBrookHTTPResponse.Empty", "text": "   ", "tags": "", "url": "BrookHTTPResponse.TBrookHTTPResponse.html#Empty"},
     {"title": "BrookHTTPResponse.SBrookInvalidHTTPStatus", "text": "   ", "tags": "", "url": "BrookHTTPResponse.html#SBrookInvalidHTTPStatus"},
     {"title": "BrookHTTPResponse.SBrookResponseAlreadySent", "text": "   ", "tags": "", "url": "BrookHTTPResponse.html#SBrookResponseAlreadySent"},
     {"title": "BrookHTTPResponse.SBrookZLibError", "text": "   ", "tags": "", "url": "BrookHTTPResponse.html#SBrookZLibError"},
     {"title": "BrookHTTPServer", "text": "   ", "tags": "", "url": "BrookHTTPServer.html"},
     {"title": "BrookHTTPServer.EBrookHTTPServerSecurity", "text": "   ", "tags": "", "url": "BrookHTTPServer.EBrookHTTPServerSecurity.html"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Assign", "text": "   ASource[in] Security source. ASource[in] Security source. ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Assign"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Clear", "text": "    ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Clear"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Validate", "text": "    ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Validate"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Active", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Active"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.PrivateKey", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#PrivateKey"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.PrivatePassword", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#PrivatePassword"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Certificate", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Certificate"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Trust", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Trust"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.DHParams", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#DHParams"},
     {"title": "BrookHTTPServer.TBrookHTTPServerSecurity.Priorities", "text": " Default: NORMAL.   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServerSecurity.html#Priorities"},
     {"title": "BrookHTTPServer.EBrookHTTPServer", "text": "   ", "tags": "", "url": "BrookHTTPServer.EBrookHTTPServer.html"},
     {"title": "BrookHTTPServer.TBrookHTTPServer", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Create", "text": "   AOwner[in] Owner component. AOwner[in] Owner component. ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Create"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Destroy", "text": "    ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Destroy"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Open", "text": "    ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Open"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Close", "text": "    ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Close"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.MHDHandle", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#MHDHandle"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Active", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Active"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Authenticated", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Authenticated"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.HostName", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#HostName"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Port", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Port"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Backlog", "text": " Default: 511.   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Backlog"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Threaded", "text": " If True, the server creates one thread per connection.   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Threaded"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.UploadsDir", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#UploadsDir"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.PostBufferSize", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#PostBufferSize"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.PayloadLimit", "text": " Use zero for no limit.   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#PayloadLimit"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.UploadsLimit", "text": " Use zero for no limit.   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#UploadsLimit"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.ThreadPoolSize", "text": " Size greater than 1 enables the thread pooling.   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#ThreadPoolSize"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.ConnectionTimeout", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#ConnectionTimeout"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.ConnectionLimit", "text": " Use zero for no limit.   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#ConnectionLimit"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.NoFavicon", "text": " If True, it avoids 404 errors by sending an empty content (204) if path is '/favicon.ico'.   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#NoFavicon"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.Security", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#Security"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnAuthenticate", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#OnAuthenticate"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnAuthenticateError", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#OnAuthenticateError"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnRequest", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#OnRequest"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnRequestError", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#OnRequestError"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnClientConnection", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#OnClientConnection"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnError", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#OnError"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnStart", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#OnStart"},
     {"title": "BrookHTTPServer.TBrookHTTPServer.OnStop", "text": "   ", "tags": "", "url": "BrookHTTPServer.TBrookHTTPServer.html#OnStop"},
     {"title": "BrookHTTPServer.SBrookActiveServer", "text": "   ", "tags": "", "url": "BrookHTTPServer.html#SBrookActiveServer"},
     {"title": "BrookHTTPServer.SBrookCannotCreateServerHandle", "text": "   ", "tags": "", "url": "BrookHTTPServer.html#SBrookCannotCreateServerHandle"},
     {"title": "BrookHTTPServer.SBrookTLSNotAvailable", "text": "   ", "tags": "", "url": "BrookHTTPServer.html#SBrookTLSNotAvailable"},
     {"title": "BrookHTTPServer.SBrookEmptyPrivateKey", "text": "   ", "tags": "", "url": "BrookHTTPServer.html#SBrookEmptyPrivateKey"},
     {"title": "BrookHTTPServer.SBrookEmptyCertificate", "text": "   ", "tags": "", "url": "BrookHTTPServer.html#SBrookEmptyCertificate"},
     {"title": "BrookHTTPServer.TBrookHTTPAuthenticateEvent", "text": "    ", "tags": "", "url": "BrookHTTPServer.html#TBrookHTTPAuthenticateEvent"},
     {"title": "BrookHTTPServer.TBrookHTTPAuthenticateErrorEvent", "text": "    ", "tags": "", "url": "BrookHTTPServer.html#TBrookHTTPAuthenticateErrorEvent"},
     {"title": "BrookHTTPServer.TBrookHTTPRequestEvent", "text": "    ", "tags": "", "url": "BrookHTTPServer.html#TBrookHTTPRequestEvent"},
     {"title": "BrookHTTPServer.TBrookHTTPRequestErrorEvent", "text": "    ", "tags": "", "url": "BrookHTTPServer.html#TBrookHTTPRequestErrorEvent"},
     {"title": "BrookHTTPServer.TBrookHTTPServerClientConnectionEvent", "text": "    ", "tags": "", "url": "BrookHTTPServer.html#TBrookHTTPServerClientConnectionEvent"},
     {"title": "BrookHTTPUploads", "text": "   ", "tags": "", "url": "BrookHTTPUploads.html"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Create", "text": "   AHandle[in] Upload handle. AHandle[in] Upload handle. ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Create"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Save", "text": "     AOverwritten[in] Overwrite upload file if it exists. AError[out] Variable reference to store string describing the error if save fails. AOverwritten[in] Overwrite upload file if it exists. AError[out] Variable reference to store string describing the error if save fails. True if the uploaded file is saved successfully.", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Save"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Save", "text": "    AError[out] Variable reference to store string describing the error if save fails. AError[out] Variable reference to store string describing the error if save fails. True if the uploaded file is saved successfully.", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Save"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Save", "text": "   AOverwritten[in] Overwrite upload file if it exists. AOverwritten[in] Overwrite upload file if it exists. ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Save"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Save", "text": "    ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Save"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.SaveAs", "text": "      APath[in] Absolute destination path. AOverwritten[in] Overwrite upload file if it exists. AError[out] Variable reference to store string describing the error if save fails. APath[in] Absolute destination path. AOverwritten[in] Overwrite upload file if it exists. AError[out] Variable reference to store string describing the error if save fails. True if the uploaded file is saved successfully.", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#SaveAs"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.SaveAs", "text": "     APath[in] Absolute destination path. AError[out] Variable reference to store string describing the error if save fails. APath[in] Absolute destination path. AError[out] Variable reference to store string describing the error if save fails. True if the uploaded file is saved successfully.", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#SaveAs"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.SaveAs", "text": "    APath[in] Absolute destination path. AOverwritten[in] Overwrite upload file if it exists. APath[in] Absolute destination path. AOverwritten[in] Overwrite upload file if it exists. ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#SaveAs"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.SaveAs", "text": "   APath[in] Absolute destination path. APath[in] Absolute destination path. ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#SaveAs"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Handle", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Handle"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.StreamHandle", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#StreamHandle"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Directory", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Directory"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Field", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Field"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Name", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Name"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Mime", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Mime"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Encoding", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Encoding"},
     {"title": "BrookHTTPUploads.TBrookHTTPUpload.Size", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUpload.html#Size"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.Create", "text": "   AUploads[in] Uploads list. AUploads[in] Uploads list. ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html#Create"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.GetCurrent", "text": "     Current upload.", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html#GetCurrent"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.MoveNext", "text": "     True when move next reaches the EOF.", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html#MoveNext"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.Current", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploadsEnumerator.html#Current"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploads.html"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.Create", "text": "   AHandle[in] Uploads handle. AHandle[in] Uploads handle. ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploads.html#Create"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.GetEnumerator", "text": "    ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploads.html#GetEnumerator"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.First", "text": "    AUpload[out] First upload returned. AUpload[out] First upload returned. True when upload is found, False otherwise.", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploads.html#First"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.Next", "text": "   AUpload[out] Next upload returned. AUpload[out] Next upload returned. ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploads.html#Next"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.EOF", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploads.html#EOF"},
     {"title": "BrookHTTPUploads.TBrookHTTPUploads.Count", "text": "   ", "tags": "", "url": "BrookHTTPUploads.TBrookHTTPUploads.html#Count"},
     {"title": "BrookLibraryLoader", "text": "   ", "tags": "", "url": "BrookLibraryLoader.html"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader", "text": "   ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.LIB_NAME", "text": "   ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#LIB_NAME"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Create", "text": "   AOwner[in] Owner component. AOwner[in] Owner component. ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#Create"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Destroy", "text": "    ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#Destroy"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Load", "text": "   ALibraryName Library name. ALibraryName Library name. ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#Load"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Load", "text": "    ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#Load"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Unload", "text": "    ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#Unload"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.IsLoaded", "text": "    ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#IsLoaded"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Open", "text": "    ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#Open"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Close", "text": "    ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#Close"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Active", "text": "   ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#Active"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.LibraryName", "text": "   ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#LibraryName"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.Version", "text": "   ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#Version"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.OnLoad", "text": "   ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#OnLoad"},
     {"title": "BrookLibraryLoader.TBrookLibraryLoader.OnUnload", "text": "   ", "tags": "", "url": "BrookLibraryLoader.TBrookLibraryLoader.html#OnUnload"},
     {"title": "BrookLibraryLoader.SBrookActiveLibLoader", "text": "   ", "tags": "", "url": "BrookLibraryLoader.html#SBrookActiveLibLoader"},
     {"title": "BrookLogger", "text": "   ", "tags": "", "url": "BrookLogger.html"},
     {"title": "BrookLogger.TBrookLoggerOutput", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerOutput.html"},
     {"title": "BrookLogger.TBrookLoggerOutput.Create", "text": "    AFilters[in] Filters to be assigned to the logger instance. AOptions[in] Options to be assigned to the logger instance. AFilters[in] Filters to be assigned to the logger instance. AOptions[in] Options to be assigned to the logger instance. ", "tags": "", "url": "BrookLogger.TBrookLoggerOutput.html#Create"},
     {"title": "BrookLogger.TBrookLoggerOutput.GetRegisterAlias", "text": "     Output source alias.", "tags": "", "url": "BrookLogger.TBrookLoggerOutput.html#GetRegisterAlias"},
     {"title": "BrookLogger.TBrookLoggerOutput.GetName", "text": "     Output source name.", "tags": "", "url": "BrookLogger.TBrookLoggerOutput.html#GetName"},
     {"title": "BrookLogger.TBrookLoggerOutput.IsFiltered", "text": "   ALevel[in] Log level. ALevel[in] Log level. ", "tags": "", "url": "BrookLogger.TBrookLoggerOutput.html#IsFiltered"},
     {"title": "BrookLogger.TBrookLoggerOutput.Log", "text": "    ALevel[in] Log level. AMessage[in] Log message. ALevel[in] Log level. AMessage[in] Log message. ", "tags": "", "url": "BrookLogger.TBrookLoggerOutput.html#Log"},
     {"title": "BrookLogger.TBrookLoggerOutput.Fail", "text": "    ALevel[in] Log level. AException[in] Log exception. ALevel[in] Log level. AException[in] Log exception. ", "tags": "", "url": "BrookLogger.TBrookLoggerOutput.html#Fail"},
     {"title": "BrookLogger.TBrookLoggerOutput.Filters", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerOutput.html#Filters"},
     {"title": "BrookLogger.TBrookLoggerOutput.Options", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerOutput.html#Options"},
     {"title": "BrookLogger.TBrookLoggerOutputConsole", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputConsole.html"},
     {"title": "BrookLogger.TBrookLoggerOutputConsole.GetName", "text": "     Output source name.", "tags": "", "url": "BrookLogger.TBrookLoggerOutputConsole.html#GetName"},
     {"title": "BrookLogger.TBrookLoggerOutputConsole.Log", "text": "    ALevel[in] Log level. AMessage[in] Log message. ALevel[in] Log level. AMessage[in] Log message. ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputConsole.html#Log"},
     {"title": "BrookLogger.TBrookLoggerOutputConsole.Fail", "text": "    ALevel[in] Log level. AException[in] Log exception. ALevel[in] Log level. AException[in] Log exception. ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputConsole.html#Fail"},
     {"title": "BrookLogger.TBrookLoggerOutputFile", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputFile.html"},
     {"title": "BrookLogger.TBrookLoggerOutputFile.AfterConstruction", "text": "    ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputFile.html#AfterConstruction"},
     {"title": "BrookLogger.TBrookLoggerOutputFile.Destroy", "text": "    ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputFile.html#Destroy"},
     {"title": "BrookLogger.TBrookLoggerOutputFile.GetName", "text": "     Output source name.", "tags": "", "url": "BrookLogger.TBrookLoggerOutputFile.html#GetName"},
     {"title": "BrookLogger.TBrookLoggerOutputFile.Log", "text": "    ALevel[in] Log level. AMessage[in] Log message. ALevel[in] Log level. AMessage[in] Log message. ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputFile.html#Log"},
     {"title": "BrookLogger.TBrookLoggerOutputFile.Fail", "text": "    ALevel[in] Log level. AException[in] Log exception. ALevel[in] Log level. AException[in] Log exception. ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputFile.html#Fail"},
     {"title": "BrookLogger.TBrookLoggerOutputFile.Directory", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputFile.html#Directory"},
     {"title": "BrookLogger.TBrookLoggerOutputFile.FileName", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerOutputFile.html#FileName"},
     {"title": "BrookLogger.TBrookLoggerLevels", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerLevels.html"},
     {"title": "BrookLogger.TBrookLoggerLevels.Create", "text": "    ", "tags": "", "url": "BrookLogger.TBrookLoggerLevels.html#Create"},
     {"title": "BrookLogger.TBrookLoggerLevels.Assign", "text": "   ASource[in] Levels source to be copied. ASource[in] Levels source to be copied. ", "tags": "", "url": "BrookLogger.TBrookLoggerLevels.html#Assign"},
     {"title": "BrookLogger.TBrookLoggerLevels.Info", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerLevels.html#Info"},
     {"title": "BrookLogger.TBrookLoggerLevels.Hint", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerLevels.html#Hint"},
     {"title": "BrookLogger.TBrookLoggerLevels.Warn", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerLevels.html#Warn"},
     {"title": "BrookLogger.TBrookLoggerLevels.Debug", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerLevels.html#Debug"},
     {"title": "BrookLogger.TBrookLoggerLevels.Error", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLoggerLevels.html#Error"},
     {"title": "BrookLogger.TBrookLogger", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLogger.html"},
     {"title": "BrookLogger.TBrookLogger.Create", "text": "   AOwner[in] Owner component. AOwner[in] Owner component. ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Create"},
     {"title": "BrookLogger.TBrookLogger.Destroy", "text": "    ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Destroy"},
     {"title": "BrookLogger.TBrookLogger.GetOutputClass", "text": "    ", "tags": "", "url": "BrookLogger.TBrookLogger.html#GetOutputClass"},
     {"title": "BrookLogger.TBrookLogger.Open", "text": "    ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Open"},
     {"title": "BrookLogger.TBrookLogger.Close", "text": "    ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Close"},
     {"title": "BrookLogger.TBrookLogger.Log", "text": "    ALevel[in] Log level. AMessage[in] Log message. ALevel[in] Log level. AMessage[in] Log message. ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Log"},
     {"title": "BrookLogger.TBrookLogger.Fail", "text": "    ALevel[in] Log level. AException[in] Log exception. ALevel[in] Log level. AException[in] Log exception. ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Fail"},
     {"title": "BrookLogger.TBrookLogger.Info", "text": "   AMessage[in] Log message. AMessage[in] Log message. ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Info"},
     {"title": "BrookLogger.TBrookLogger.Hint", "text": "   AMessage[in] Log message. AMessage[in] Log message. ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Hint"},
     {"title": "BrookLogger.TBrookLogger.Warn", "text": "   AMessage[in] Log message. AMessage[in] Log message. ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Warn"},
     {"title": "BrookLogger.TBrookLogger.Debug", "text": "   AMessage[in] Log message. AMessage[in] Log message. ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Debug"},
     {"title": "BrookLogger.TBrookLogger.Error", "text": "   AMessage[in] Log message. AMessage[in] Log message. ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Error"},
     {"title": "BrookLogger.TBrookLogger.Output", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Output"},
     {"title": "BrookLogger.TBrookLogger.Active", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Active"},
     {"title": "BrookLogger.TBrookLogger.Levels", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Levels"},
     {"title": "BrookLogger.TBrookLogger.OutputName", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLogger.html#OutputName"},
     {"title": "BrookLogger.TBrookLogger.Filters", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Filters"},
     {"title": "BrookLogger.TBrookLogger.Options", "text": "   ", "tags": "", "url": "BrookLogger.TBrookLogger.html#Options"},
     {"title": "BrookLogger.BROOK_LOGGER_OUTPUT_NAME", "text": "   ", "tags": "", "url": "BrookLogger.html#BROOK_LOGGER_OUTPUT_NAME"},
     {"title": "BrookLogger.BROOK_LOGGER_TAG", "text": "   ", "tags": "", "url": "BrookLogger.html#BROOK_LOGGER_TAG"},
     {"title": "BrookLogger.SBrookEmptyOutputName", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookEmptyOutputName"},
     {"title": "BrookLogger.SBrookActiveOutput", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookActiveOutput"},
     {"title": "BrookLogger.SBrookInactiveOutput", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookInactiveOutput"},
     {"title": "BrookLogger.SBrookInvalidOutputClass", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookInvalidOutputClass"},
     {"title": "BrookLogger.SBrookUnknownOutputName", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookUnknownOutputName"},
     {"title": "BrookLogger.SBrookLevelInfo", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookLevelInfo"},
     {"title": "BrookLogger.SBrookLevelHint", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookLevelHint"},
     {"title": "BrookLogger.SBrookLevelWarn", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookLevelWarn"},
     {"title": "BrookLogger.SBrookLevelDebug", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookLevelDebug"},
     {"title": "BrookLogger.SBrookLevelError", "text": "   ", "tags": "", "url": "BrookLogger.html#SBrookLevelError"},
     {"title": "BrookLogger.TBrookLoggerOutputClass", "text": "   ", "tags": "", "url": "BrookLogger.html#TBrookLoggerOutputClass"},
     {"title": "BrookMathExpression", "text": "   ", "tags": "", "url": "BrookMathExpression.html"},
     {"title": "BrookMathExpression.TBrookMathExpressionError", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionError.html"},
     {"title": "BrookMathExpression.TBrookMathExpressionError.Create", "text": "   AHandle[in] Math expression error handle. AHandle[in] Math expression error handle. ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionError.html#Create"},
     {"title": "BrookMathExpression.TBrookMathExpressionError.Near", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionError.html#Near"},
     {"title": "BrookMathExpression.TBrookMathExpressionError.Kind", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionError.html#Kind"},
     {"title": "BrookMathExpression.TBrookMathExpressionError.Message", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionError.html#Message"},
     {"title": "BrookMathExpression.TBrookMathExpressionError.Handle", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionError.html#Handle"},
     {"title": "BrookMathExpression.TBrookMathExpressionExtension", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionExtension.html"},
     {"title": "BrookMathExpression.TBrookMathExpressionExtension.Create", "text": "    AHandle[in] Math expression extension handle. AIdent[in] Function identifier. AHandle[in] Math expression extension handle. AIdent[in] Function identifier. ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionExtension.html#Create"},
     {"title": "BrookMathExpression.TBrookMathExpressionExtension.HasArgs", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionExtension.html#HasArgs"},
     {"title": "BrookMathExpression.TBrookMathExpressionExtension.Args", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionExtension.html#Args"},
     {"title": "BrookMathExpression.TBrookMathExpressionExtension.Ident", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionExtension.html#Ident"},
     {"title": "BrookMathExpression.TBrookMathExpressionExtension.Handle", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpressionExtension.html#Handle"},
     {"title": "BrookMathExpression.TBrookMathExpression", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html"},
     {"title": "BrookMathExpression.TBrookMathExpression.Create", "text": "   AOwner[in] Owner component. AOwner[in] Owner component. ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Create"},
     {"title": "BrookMathExpression.TBrookMathExpression.Destroy", "text": "    ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Destroy"},
     {"title": "BrookMathExpression.TBrookMathExpression.Open", "text": "    ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Open"},
     {"title": "BrookMathExpression.TBrookMathExpression.Close", "text": "    ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Close"},
     {"title": "BrookMathExpression.TBrookMathExpression.Compile", "text": "     AExpression[in] Mathematical expression. AError[out] Mathematical expression error. AExpression[in] Mathematical expression. AError[out] Mathematical expression error. True if compilation succeeds.", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Compile"},
     {"title": "BrookMathExpression.TBrookMathExpression.Compile", "text": "    AExpression[in] Mathematical expression. AExpression[in] Mathematical expression. True if compilation succeeds.", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Compile"},
     {"title": "BrookMathExpression.TBrookMathExpression.Clear", "text": "    ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Clear"},
     {"title": "BrookMathExpression.TBrookMathExpression.Evaluate", "text": "     Evaluated mathematical expression", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Evaluate"},
     {"title": "BrookMathExpression.TBrookMathExpression.GetVariable", "text": "    AName[in] Name of the declared variable. AName[in] Name of the declared variable. Value of a declared variable.", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#GetVariable"},
     {"title": "BrookMathExpression.TBrookMathExpression.SetVariable", "text": "    AName[in] Name for the variable. AValue[in] Value for the variable. AName[in] Name for the variable. AValue[in] Value for the variable. ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#SetVariable"},
     {"title": "BrookMathExpression.TBrookMathExpression.Compiled", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Compiled"},
     {"title": "BrookMathExpression.TBrookMathExpression.Variables", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Variables"},
     {"title": "BrookMathExpression.TBrookMathExpression.Active", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Active"},
     {"title": "BrookMathExpression.TBrookMathExpression.Expression", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Expression"},
     {"title": "BrookMathExpression.TBrookMathExpression.Extensions", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#Extensions"},
     {"title": "BrookMathExpression.TBrookMathExpression.OnExtension", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#OnExtension"},
     {"title": "BrookMathExpression.TBrookMathExpression.OnError", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#OnError"},
     {"title": "BrookMathExpression.TBrookMathExpression.OnActivate", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#OnActivate"},
     {"title": "BrookMathExpression.TBrookMathExpression.OnDeactivate", "text": "   ", "tags": "", "url": "BrookMathExpression.TBrookMathExpression.html#OnDeactivate"},
     {"title": "BrookMathExpression.SBrookInactiveMathExpression", "text": "   ", "tags": "", "url": "BrookMathExpression.html#SBrookInactiveMathExpression"},
     {"title": "BrookMathExpression.Evaluate", "text": "    ", "tags": "", "url": "BrookMathExpression.html#Evaluate"},
     {"title": "BrookMathExpression.TBrookMathExpressionErrorKind", "text": "    ekNone None error.   ekUnknown Error not related to evaluation.   ekUnexpectedNumber Unexpected number, e.g.  '(1+2)3'.  ekUnexpectedWord Unexpected word, e.g.  '(1+2)x'.  ekUnexpectedParens Unexpected parenthesis, e.g.  '1(2+3)'.  ekMissingOperand Missing expected operand, e.g.  '0&circ;+1'.  ekUnknownOperator Unknown operator, e.g.  '(1+2).'.  ekInvalidFuncName Invalid function name, e.g.  'unknownfunc()'.  ekBadParens Bad parenthesis, e.g.  '(1+2'.  ekTooFewFuncArgs Too few arguments passed to a macro, e.g.  '$()'.  ekFirstArgIsNotVar First macro argument is not variable, e.g.  '$(1)'.  ekBadVariableName Bad variable name, e.g.  '2.3.4'.  ekBadAssignment Bad assignment, e.g.  '2=3'. ", "tags": "", "url": "BrookMathExpression.html#TBrookMathExpressionErrorKind"},
     {"title": "BrookMathExpression.TBrookMathExpressionErrorEvent", "text": "    ", "tags": "", "url": "BrookMathExpression.html#TBrookMathExpressionErrorEvent"},
     {"title": "BrookMathExpression.TBrookMathExpressionExtensionEvent", "text": "    ", "tags": "", "url": "BrookMathExpression.html#TBrookMathExpressionExtensionEvent"},
     {"title": "BrookMediaTypes", "text": "   ", "tags": "", "url": "BrookMediaTypes.html"},
     {"title": "BrookMediaTypes.EBrookMediaTypes", "text": "   ", "tags": "", "url": "BrookMediaTypes.EBrookMediaTypes.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypes", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Create", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Create"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Destroy", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Destroy"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.GetRegisterAlias", "text": "     Media type source alias.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#GetRegisterAlias"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.GetDescription", "text": "     Description of the media types source.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.IsValid", "text": "    AType[in] Media type identifier. AType[in] Media type identifier. True if a string represents a media type.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#IsValid"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.IsText", "text": " 'text/plain'.    AType[in] Media type identifier. AType[in] Media type identifier. True if a string represents a text media type.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#IsText"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.IsExt", "text": " 'text/plain'.    AExt[in] File extension. AExt[in] File extension. True if a string represents a file extension.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#IsExt"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.NormalizeExt", "text": " a 'pas' will be normalized to '.pas'.    AExt[in] File extension. AExt[in] File extension. Normalized file extension.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#NormalizeExt"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Prepare", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Prepare"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Add", "text": "    AExt[in] File extension. AType[in] Media type identifier. AExt[in] File extension. AType[in] Media type identifier. ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Add"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Remove", "text": "   AExt[in] File extension. AExt[in] File extension. ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Remove"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.TryType", "text": "     AExt[in] File extension. AType[in] Media type identifier. AExt[in] File extension. AType[in] Media type identifier. True if the media type identifier is found.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#TryType"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Find", "text": " If the cache is not prepared yet, this method prepares it automatically. If a media type identifier is not found, the ADefType is returned instead.     AExt[in] File extension. ADefType[in] Default media type identifier. AExt[in] File extension. ADefType[in] Default media type identifier. Media type identifier.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Find"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Find", "text": " If the cache is not prepared yet, this method prepares it automatically. If a media type identifier is not found, the DefaultType is returned instead.    AExt[in] File extension. AExt[in] File extension. Media type identifier.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Find"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Count", "text": "     All media type identifiers present in the cache.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Count"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Clear", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Clear"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.DefaultType", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#DefaultType"},
     {"title": "BrookMediaTypes.TBrookMediaTypes.Prepared", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypes.html#Prepared"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesParser.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser.Create", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesParser.html#Create"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser.Parse", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesParser.html#Parse"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser.Reader", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesParser.html#Reader"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParser.Types", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesParser.html#Types"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParserNginx", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesParserNginx.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesParserNginx.Parse", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesParserNginx.html#Parse"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Create", "text": "   AFileName[in] Media types file. AFileName[in] Media types file. ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#Create"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Create", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#Create"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Destroy", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#Destroy"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.GetDescription", "text": "     Description of the media types source.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.GetFileName", "text": "     File name of the media types source.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#GetFileName"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Prepare", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#Prepare"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Clear", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#Clear"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Reader", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#Reader"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.Parser", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#Parser"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPath.FileName", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesPath.html#FileName"},
     {"title": "BrookMediaTypes.TBrookMediaTypesApache", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesApache.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesApache.GetDescription", "text": "     Description of the media types source.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesApache.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesNginx", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesNginx.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesNginx.GetDescription", "text": "     Description of the media types source.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesNginx.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesNginx.GetFileName", "text": "     File name of the media types source.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesNginx.html#GetFileName"},
     {"title": "BrookMediaTypes.TBrookMediaTypesWindows", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesWindows.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesWindows.GetDescription", "text": "     Description of the media types source.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesWindows.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesUnix", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesUnix.html"},
     {"title": "BrookMediaTypes.TBrookMediaTypesUnix.GetDescription", "text": "     Description of the media types source.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesUnix.html#GetDescription"},
     {"title": "BrookMediaTypes.TBrookMediaTypesUnix.GetFileName", "text": "     File name of the media types source.", "tags": "", "url": "BrookMediaTypes.TBrookMediaTypesUnix.html#GetFileName"},
     {"title": "BrookMediaTypes.TBrookMIME", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html"},
     {"title": "BrookMediaTypes.TBrookMIME.Create", "text": "   AOwner[in] Owner component. AOwner[in] Owner component. ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#Create"},
     {"title": "BrookMediaTypes.TBrookMIME.Destroy", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#Destroy"},
     {"title": "BrookMediaTypes.TBrookMIME.GetProviderClass", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#GetProviderClass"},
     {"title": "BrookMediaTypes.TBrookMIME.Open", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#Open"},
     {"title": "BrookMediaTypes.TBrookMIME.Close", "text": "    ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#Close"},
     {"title": "BrookMediaTypes.TBrookMIME.Types", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#Types"},
     {"title": "BrookMediaTypes.TBrookMIME.Active", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#Active"},
     {"title": "BrookMediaTypes.TBrookMIME.DefaultType", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#DefaultType"},
     {"title": "BrookMediaTypes.TBrookMIME.FileName", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#FileName"},
     {"title": "BrookMediaTypes.TBrookMIME.Provider", "text": "   ", "tags": "", "url": "BrookMediaTypes.TBrookMIME.html#Provider"},
     {"title": "BrookMediaTypes.BROOK_MIME_FILE", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#BROOK_MIME_FILE"},
     {"title": "BrookMediaTypes.BROOK_MIME_TAG", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#BROOK_MIME_TAG"},
     {"title": "BrookMediaTypes.BROOK_MIME_PROVIDER", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#BROOK_MIME_PROVIDER"},
     {"title": "BrookMediaTypes.SBrookInvalidMediaType", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#SBrookInvalidMediaType"},
     {"title": "BrookMediaTypes.SBrookInvalidMediaExt", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#SBrookInvalidMediaExt"},
     {"title": "BrookMediaTypes.SBrookEmptyMediaType", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#SBrookEmptyMediaType"},
     {"title": "BrookMediaTypes.SBrookEmptyMediaExt", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#SBrookEmptyMediaExt"},
     {"title": "BrookMediaTypes.SBrookActiveMIMETypes", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#SBrookActiveMIMETypes"},
     {"title": "BrookMediaTypes.SBrookInactiveMIMETypes", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#SBrookInactiveMIMETypes"},
     {"title": "BrookMediaTypes.SBrookEmptyMIMEProvider", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#SBrookEmptyMIMEProvider"},
     {"title": "BrookMediaTypes.SBrookInvalidMIMEProviderClass", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#SBrookInvalidMIMEProviderClass"},
     {"title": "BrookMediaTypes.SBrookUnknownMIMEProvider", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#SBrookUnknownMIMEProvider"},
     {"title": "BrookMediaTypes.TBrookMediaTypesClass", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#TBrookMediaTypesClass"},
     {"title": "BrookMediaTypes.TBrookMediaTypesPathClass", "text": "   ", "tags": "", "url": "BrookMediaTypes.html#TBrookMediaTypesPathClass"},
     {"title": "BrookReader", "text": "   ", "tags": "", "url": "BrookReader.html"},
     {"title": "BrookReader.TBrookTextReader", "text": "   ", "tags": "", "url": "BrookReader.TBrookTextReader.html"},
     {"title": "BrookReader.TBrookTextReader.Reset", "text": "    ", "tags": "", "url": "BrookReader.TBrookTextReader.html#Reset"},
     {"title": "BrookReader.TBrookTextReader.Close", "text": "    ", "tags": "", "url": "BrookReader.TBrookTextReader.html#Close"},
     {"title": "BrookReader.TBrookTextReader.IsEOF", "text": "     True if the reader has reached the End-Of-File.", "tags": "", "url": "BrookReader.TBrookTextReader.html#IsEOF"},
     {"title": "BrookReader.TBrookTextReader.ReadBytes", "text": "   ALine[out] Line read as bytes. ALine[out] Line read as bytes. ", "tags": "", "url": "BrookReader.TBrookTextReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookTextReader.ReadBytes", "text": "     Line read as bytes.", "tags": "", "url": "BrookReader.TBrookTextReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookTextReader.Read", "text": "   ALine[out] read as static string. ALine[out] read as static string. ", "tags": "", "url": "BrookReader.TBrookTextReader.html#Read"},
     {"title": "BrookReader.TBrookTextReader.Read", "text": "     Line read as static string.", "tags": "", "url": "BrookReader.TBrookTextReader.html#Read"},
     {"title": "BrookReader.TBrookTextReader.EOF", "text": "   ", "tags": "", "url": "BrookReader.TBrookTextReader.html#EOF"},
     {"title": "BrookReader.TBrookTextReader.Encoding", "text": "   ", "tags": "", "url": "BrookReader.TBrookTextReader.html#Encoding"},
     {"title": "BrookReader.TBrookStreamReader", "text": "   ", "tags": "", "url": "BrookReader.TBrookStreamReader.html"},
     {"title": "BrookReader.TBrookStreamReader.Create", "text": "  AEncoding[in] Character encoding determined during reading. AStream[in] Stream to be read line by line. ABufferSize[in] Buffer size for the line reading. AOwnsStream[in] If True the stream is freed on Destroy. AEncoding[in] Character encoding determined during reading. AStream[in] Stream to be read line by line. ABufferSize[in] Buffer size for the line reading. AOwnsStream[in] If True the stream is freed on Destroy. ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#Create"},
     {"title": "BrookReader.TBrookStreamReader.Create", "text": "  AEncoding[in] Character encoding determined during reading. AStream[in] Stream to be read line by line. AEncoding[in] Character encoding determined during reading. AStream[in] Stream to be read line by line. ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#Create"},
     {"title": "BrookReader.TBrookStreamReader.Create", "text": "  AStream[in] Stream to be read line by line. AStream[in] Stream to be read line by line. ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#Create"},
     {"title": "BrookReader.TBrookStreamReader.Destroy", "text": "    ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#Destroy"},
     {"title": "BrookReader.TBrookStreamReader.Reset", "text": "    ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#Reset"},
     {"title": "BrookReader.TBrookStreamReader.Close", "text": "    ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#Close"},
     {"title": "BrookReader.TBrookStreamReader.IsEOF", "text": "     True if the stream has reached the End-Of-File.", "tags": "", "url": "BrookReader.TBrookStreamReader.html#IsEOF"},
     {"title": "BrookReader.TBrookStreamReader.ReadBytes", "text": "   ALine[out] Line read as bytes. ALine[out] Line read as bytes. ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookStreamReader.ReadBytes", "text": "     Line read as bytes.", "tags": "", "url": "BrookReader.TBrookStreamReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookStreamReader.Read", "text": "   ALine[out] read as static string. ALine[out] read as static string. ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#Read"},
     {"title": "BrookReader.TBrookStreamReader.Read", "text": "     Line read as static string.", "tags": "", "url": "BrookReader.TBrookStreamReader.html#Read"},
     {"title": "BrookReader.TBrookStreamReader.Stream", "text": "   ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#Stream"},
     {"title": "BrookReader.TBrookStreamReader.OwnsStream", "text": "   ", "tags": "", "url": "BrookReader.TBrookStreamReader.html#OwnsStream"},
     {"title": "BrookReader.TBrookBaseReader", "text": "   ", "tags": "", "url": "BrookReader.TBrookBaseReader.html"},
     {"title": "BrookReader.TBrookBaseReader.Destroy", "text": "    ", "tags": "", "url": "BrookReader.TBrookBaseReader.html#Destroy"},
     {"title": "BrookReader.TBrookBaseReader.Reset", "text": "    ", "tags": "", "url": "BrookReader.TBrookBaseReader.html#Reset"},
     {"title": "BrookReader.TBrookBaseReader.Close", "text": "    ", "tags": "", "url": "BrookReader.TBrookBaseReader.html#Close"},
     {"title": "BrookReader.TBrookBaseReader.IsEOF", "text": "     True if the reader has reached the End-Of-File.", "tags": "", "url": "BrookReader.TBrookBaseReader.html#IsEOF"},
     {"title": "BrookReader.TBrookBaseReader.ReadBytes", "text": "   ALine[out] Line read as bytes. ALine[out] Line read as bytes. ", "tags": "", "url": "BrookReader.TBrookBaseReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookBaseReader.ReadBytes", "text": "     Line read as bytes.", "tags": "", "url": "BrookReader.TBrookBaseReader.html#ReadBytes"},
     {"title": "BrookReader.TBrookBaseReader.Read", "text": "   ALine[out] read as static string. ALine[out] read as static string. ", "tags": "", "url": "BrookReader.TBrookBaseReader.html#Read"},
     {"title": "BrookReader.TBrookBaseReader.Read", "text": "     Line read as static string.", "tags": "", "url": "BrookReader.TBrookBaseReader.html#Read"},
     {"title": "BrookReader.TBrookStringReader", "text": "   ", "tags": "", "url": "BrookReader.TBrookStringReader.html"},
     {"title": "BrookReader.TBrookStringReader.Create", "text": "  AEncoding[in] Character encoding determined during reading. AString[in] String to be read line by line. ABufferSize[in] Buffer size for the line reading. AEncoding[in] Character encoding determined during reading. AString[in] String to be read line by line. ABufferSize[in] Buffer size for the line reading. ", "tags": "", "url": "BrookReader.TBrookStringReader.html#Create"},
     {"title": "BrookReader.TBrookStringReader.Create", "text": "  AEncoding[in] Character encoding determined during reading. AString[in] String to be read line by line. AEncoding[in] Character encoding determined during reading. AString[in] String to be read line by line. ", "tags": "", "url": "BrookReader.TBrookStringReader.html#Create"},
     {"title": "BrookReader.TBrookStringReader.Create", "text": "  AString[in] String to be read line by line. AString[in] String to be read line by line. ", "tags": "", "url": "BrookReader.TBrookStringReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader", "text": "   ", "tags": "", "url": "BrookReader.TBrookFileReader.html"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AEncoding[in] Character encoding determined during reading. AFileName[in] File to be read line by line. AMode[in] Open mode and (possibly) a share mode OR-ed together. ARights[in] Permission bits with which to create the file on Linux. ABufferSize[in] Buffer size for the line reading. AEncoding[in] Character encoding determined during reading. AFileName[in] File to be read line by line. AMode[in] Open mode and (possibly) a share mode OR-ed together. ARights[in] Permission bits with which to create the file on Linux. ABufferSize[in] Buffer size for the line reading. ", "tags": "", "url": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AEncoding[in] Character encoding determined during reading. AFileName[in] File to be read line by line. AMode[in] Open mode and (possibly) a share mode OR-ed together. ABufferSize[in] Buffer size for the line reading. AEncoding[in] Character encoding determined during reading. AFileName[in] File to be read line by line. AMode[in] Open mode and (possibly) a share mode OR-ed together. ABufferSize[in] Buffer size for the line reading. ", "tags": "", "url": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AEncoding[in] Character encoding determined during reading. AFileName[in] File to be read line by line. ABufferSize[in] Buffer size for the line reading. AEncoding[in] Character encoding determined during reading. AFileName[in] File to be read line by line. ABufferSize[in] Buffer size for the line reading. ", "tags": "", "url": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AEncoding[in] Character encoding determined during reading. AFileName[in] File to be read line by line. AEncoding[in] Character encoding determined during reading. AFileName[in] File to be read line by line. ", "tags": "", "url": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookReader.TBrookFileReader.Create", "text": "  AFileName[in] File to be read line by line. AFileName[in] File to be read line by line. ", "tags": "", "url": "BrookReader.TBrookFileReader.html#Create"},
     {"title": "BrookString", "text": "   ", "tags": "", "url": "BrookString.html"},
     {"title": "BrookString.TBrookString", "text": "   ", "tags": "", "url": "BrookString.TBrookString.html"},
     {"title": "BrookString.TBrookString.Create", "text": "   AHandle[in] String handle. AHandle[in] String handle. ", "tags": "", "url": "BrookString.TBrookString.html#Create"},
     {"title": "BrookString.TBrookString.Destroy", "text": "    ", "tags": "", "url": "BrookString.TBrookString.html#Destroy"},
     {"title": "BrookString.TBrookString.WriteBytes", "text": " All strings previously written are kept.     ASource[in] String buffer source to be written. ALength[in] Length of the string buffer being written. ASource[in] String buffer source to be written. ALength[in] Length of the string buffer being written. Length of the written string buffer.", "tags": "", "url": "BrookString.TBrookString.html#WriteBytes"},
     {"title": "BrookString.TBrookString.Write", "text": " All strings previously written are kept.    ASource[in] String to be written. AEncoding[in] Determines the encoding of the string being written. ASource[in] String to be written. AEncoding[in] Determines the encoding of the string being written. ", "tags": "", "url": "BrookString.TBrookString.html#Write"},
     {"title": "BrookString.TBrookString.Write", "text": " All strings previously written are kept.   ASource[in] String to be written. ASource[in] String to be written. ", "tags": "", "url": "BrookString.TBrookString.html#Write"},
     {"title": "BrookString.TBrookString.ToString", "text": "    ", "tags": "", "url": "BrookString.TBrookString.html#ToString"},
     {"title": "BrookString.TBrookString.Clear", "text": "    ", "tags": "", "url": "BrookString.TBrookString.html#Clear"},
     {"title": "BrookString.TBrookString.OwnsHandle", "text": "   ", "tags": "", "url": "BrookString.TBrookString.html#OwnsHandle"},
     {"title": "BrookString.TBrookString.Content", "text": "   ", "tags": "", "url": "BrookString.TBrookString.html#Content"},
     {"title": "BrookString.TBrookString.Length", "text": "   ", "tags": "", "url": "BrookString.TBrookString.html#Length"},
     {"title": "BrookString.TBrookString.Text", "text": "   ", "tags": "", "url": "BrookString.TBrookString.html#Text"},
     {"title": "BrookStringMap", "text": "   ", "tags": "", "url": "BrookStringMap.html"},
     {"title": "BrookStringMap.TBrookStringPair", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringPair.html"},
     {"title": "BrookStringMap.TBrookStringPair.Create", "text": "    AName[in] Name of the pair. AValue[in] Value of the pair. AName[in] Name of the pair. AValue[in] Value of the pair. ", "tags": "", "url": "BrookStringMap.TBrookStringPair.html#Create"},
     {"title": "BrookStringMap.TBrookStringPair.Name", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringPair.html#Name"},
     {"title": "BrookStringMap.TBrookStringPair.Value", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringPair.html#Value"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringMapEnumerator.html"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator.Create", "text": "   AMap[in] Pairs map. AMap[in] Pairs map. ", "tags": "", "url": "BrookStringMap.TBrookStringMapEnumerator.html#Create"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator.GetCurrent", "text": "     Current pair.", "tags": "", "url": "BrookStringMap.TBrookStringMapEnumerator.html#GetCurrent"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator.MoveNext", "text": "     True when move next reaches the EOF.", "tags": "", "url": "BrookStringMap.TBrookStringMapEnumerator.html#MoveNext"},
     {"title": "BrookStringMap.TBrookStringMapEnumerator.Current", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringMapEnumerator.html#Current"},
     {"title": "BrookStringMap.TBrookStringMap", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html"},
     {"title": "BrookStringMap.TBrookStringMap.Create", "text": "   AHandle[in] Pointer to store the string map handle. AHandle[in] Pointer to store the string map handle. ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Create"},
     {"title": "BrookStringMap.TBrookStringMap.Destroy", "text": "    ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Destroy"},
     {"title": "BrookStringMap.TBrookStringMap.Assign", "text": "   ASource[in] String map source to be copied. ASource[in] String map source to be copied. ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Assign"},
     {"title": "BrookStringMap.TBrookStringMap.IsEmpty", "text": "     True when map is empty, False otherwise.", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#IsEmpty"},
     {"title": "BrookStringMap.TBrookStringMap.GetEnumerator", "text": "    ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#GetEnumerator"},
     {"title": "BrookStringMap.TBrookStringMap.Add", "text": "    AName[in] Name of the pair. AValue[in] Value of the pair. AName[in] Name of the pair. AValue[in] Value of the pair. ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Add"},
     {"title": "BrookStringMap.TBrookStringMap.AddOrSet", "text": "    AName[in] Name of the pair. AValue[in] Value of the pair. AName[in] Name of the pair. AValue[in] Value of the pair. ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#AddOrSet"},
     {"title": "BrookStringMap.TBrookStringMap.Remove", "text": "   AName[in] Name of the pair. AName[in] Name of the pair. ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Remove"},
     {"title": "BrookStringMap.TBrookStringMap.Clear", "text": "    ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Clear"},
     {"title": "BrookStringMap.TBrookStringMap.Find", "text": "     AName[in] Name of the pair. APair[out] Reference to store found pair. AName[in] Name of the pair. APair[out] Reference to store found pair. True when pair is found, False otherwise.", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Find"},
     {"title": "BrookStringMap.TBrookStringMap.Contains", "text": "    AName[in] Name of the pair. AName[in] Name of the pair. True when map contains the pair, False otherwise.", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Contains"},
     {"title": "BrookStringMap.TBrookStringMap.Get", "text": "    AName[in] Name of the pair. AName[in] Name of the pair. Pair value.", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Get"},
     {"title": "BrookStringMap.TBrookStringMap.TryValue", "text": "     AName[in] Name of the pair. AValue[out] Reference to store found value. AName[in] Name of the pair. AValue[out] Reference to store found value. True when pair is found, False otherwise.", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#TryValue"},
     {"title": "BrookStringMap.TBrookStringMap.First", "text": "    APair[out] First pair returned. APair[out] First pair returned. True when pair is found, False otherwise.", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#First"},
     {"title": "BrookStringMap.TBrookStringMap.Next", "text": "   APair[out] Next pair returned. APair[out] Next pair returned. ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Next"},
     {"title": "BrookStringMap.TBrookStringMap.Iterate", "text": "    AIterator[in] Function to iterate the pairs. AData[in,out] User-specified value. AIterator[in] Function to iterate the pairs. AData[in,out] User-specified value. ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Iterate"},
     {"title": "BrookStringMap.TBrookStringMap.Sort", "text": "    AComparator[in] Function to sort the pairs. AData[in,out] User-specified value. AComparator[in] Function to sort the pairs. AData[in,out] User-specified value. ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Sort"},
     {"title": "BrookStringMap.TBrookStringMap.Fetch", "text": "     AObject[in] Object with properties that correspond to the fetched string map. AAllowed[in] Array of properties to be allowed when fetching. AIgnored[in] Array of properties to be ignored when fetching. AObject[in] Object with properties that correspond to the fetched string map. AAllowed[in] Array of properties to be allowed when fetching. AIgnored[in] Array of properties to be ignored when fetching. ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Fetch"},
     {"title": "BrookStringMap.TBrookStringMap.Fetch", "text": "    ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Fetch"},
     {"title": "BrookStringMap.TBrookStringMap.ToString", "text": "    ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#ToString"},
     {"title": "BrookStringMap.TBrookStringMap.Count", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Count"},
     {"title": "BrookStringMap.TBrookStringMap.Values", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Values"},
     {"title": "BrookStringMap.TBrookStringMap.EOF", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#EOF"},
     {"title": "BrookStringMap.TBrookStringMap.Empty", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#Empty"},
     {"title": "BrookStringMap.TBrookStringMap.ClearOnDestroy", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#ClearOnDestroy"},
     {"title": "BrookStringMap.TBrookStringMap.OnChange", "text": "   ", "tags": "", "url": "BrookStringMap.TBrookStringMap.html#OnChange"},
     {"title": "BrookStringMap.TBrookStringMapOperation", "text": "        sgmoNone None operation or map cleaned.   sgmoAdd Pair added to the map.   sgmoAddOrSet Pair added or set to the map.   sgmoRemove Pair removed from the map.  ", "tags": "", "url": "BrookStringMap.html#TBrookStringMapOperation"},
     {"title": "BrookStringMap.TBrookStringMapChangeEvent", "text": "    ASender Event caller. AOperation Operation kind. ASender Event caller. AOperation Operation kind. ", "tags": "", "url": "BrookStringMap.html#TBrookStringMapChangeEvent"},
     {"title": "BrookStringMap.TBrookStringMapIterator", "text": "    AData[in,out] User-defined data. APair[out] Current iterated pair. AData[in,out] User-defined data. APair[out] Current iterated pair. ", "tags": "", "url": "BrookStringMap.html#TBrookStringMapIterator"},
     {"title": "BrookStringMap.TBrookStringMapComparator", "text": "     AData[in,out] User-defined data. APairA[out] Current left pair (A). APairB[out] Current right pair (B). AData[in,out] User-defined data. APairA[out] Current left pair (A). APairB[out] Current right pair (B). ", "tags": "", "url": "BrookStringMap.html#TBrookStringMapComparator"},
     {"title": "BrookURLEntryPoints", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.html"},
     {"title": "BrookURLEntryPoints.EBrookURLEntryPoint", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.EBrookURLEntryPoint.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoint.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.Create", "text": "   ACollection[in] Entry-point list. ACollection[in] Entry-point list. ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoint.html#Create"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.Validate", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoint.html#Validate"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.UserData", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoint.html#UserData"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.Name", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoint.html#Name"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoint.Router", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoint.html#Router"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.GetCurrent", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.html#GetCurrent"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.Current", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointListEnumerator.html#Current"},
     {"title": "BrookURLEntryPoints.EBrookURLEntryPointList", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.EBrookURLEntryPointList.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Create", "text": "   AOwner[in] Entry-points persistent. AOwner[in] Entry-points persistent. ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Create"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Destroy", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Destroy"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.GetEntryPointClass", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#GetEntryPointClass"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.GetEnumerator", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#GetEnumerator"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Prepare", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Prepare"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Unprepare", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Unprepare"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.IsPrepared", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#IsPrepared"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.NewName", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#NewName"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Add", "text": "     Entry-point item.", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Add"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Remove", "text": "    AName[in] Entry-point name. AName[in] Entry-point name. True if an entry-point is removed.", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Remove"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.IndexOf", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#IndexOf"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.FindInList", "text": "    AName[in] Entry-point name. AName[in] Entry-point name. Entry-point item.", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#FindInList"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Find", "text": "     APath[in] Entry-point path. AUserData[out] User-defined data. APath[in] Entry-point path. AUserData[out] User-defined data. True if user-data is found.", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Find"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Clear", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Clear"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Items", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Items"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointList.Prepared", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPointList.html#Prepared"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Create", "text": "   AOwner[in] Owner component. AOwner[in] Owner component. ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Create"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Destroy", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Destroy"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.GetEnumerator", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#GetEnumerator"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Add", "text": "     Entry-point item.", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Add"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Remove", "text": "   AName[in] Entry-point name. AName[in] Entry-point name. ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Remove"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Clear", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Clear"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Open", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Open"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Close", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Close"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Enter", "text": "      ASender[in] Sender object. APath[in] Entry-point path. ARequest[in] Request object to pass to the entry-point found. AResponse: Response object to pass to the entry-point found. ASender[in] Sender object. APath[in] Entry-point path. ARequest[in] Request object to pass to the entry-point found. AResponse: Response object to pass to the entry-point found. ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Enter"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Enter", "text": "     ASender[in] Sender object. ARequest[in] Request object to pass to the entry-point found. AResponse: Response object to pass to the entry-point found. ASender[in] Sender object. ARequest[in] Request object to pass to the entry-point found. AResponse: Response object to pass to the entry-point found. ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Enter"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Items", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Items"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.Active", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#Active"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.List", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#List"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.OnNotFound", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#OnNotFound"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.OnActivate", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#OnActivate"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPoints.OnDeactivate", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.TBrookURLEntryPoints.html#OnDeactivate"},
     {"title": "BrookURLEntryPoints.SBrookEntryPointListUnprepared", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.html#SBrookEntryPointListUnprepared"},
     {"title": "BrookURLEntryPoints.SBrookInactiveEntryPoints", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.html#SBrookInactiveEntryPoints"},
     {"title": "BrookURLEntryPoints.SBrookNoEntryPointsDefined", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.html#SBrookNoEntryPointsDefined"},
     {"title": "BrookURLEntryPoints.SBrookEntryPointAlreadyExists", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.html#SBrookEntryPointAlreadyExists"},
     {"title": "BrookURLEntryPoints.SBrookEmptyEntryPointName", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.html#SBrookEmptyEntryPointName"},
     {"title": "BrookURLEntryPoints.SBrookEntryPointNotFound", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.html#SBrookEntryPointNotFound"},
     {"title": "BrookURLEntryPoints.SBrookRouterNotAssigned", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.html#SBrookRouterNotAssigned"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointClass", "text": "   ", "tags": "", "url": "BrookURLEntryPoints.html#TBrookURLEntryPointClass"},
     {"title": "BrookURLEntryPoints.TBrookURLEntryPointsNotFoundEvent", "text": "    ", "tags": "", "url": "BrookURLEntryPoints.html#TBrookURLEntryPointsNotFoundEvent"},
     {"title": "BrookURLRouter", "text": "   ", "tags": "", "url": "BrookURLRouter.html"},
     {"title": "BrookURLRouter.EBrookURLRoute", "text": "   ", "tags": "", "url": "BrookURLRouter.EBrookURLRoute.html"},
     {"title": "BrookURLRouter.TBrookURLRoute", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html"},
     {"title": "BrookURLRouter.TBrookURLRoute.DefaultReqMethods", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#DefaultReqMethods"},
     {"title": "BrookURLRouter.TBrookURLRoute.Create", "text": "   ACollection[in] Routes list. ACollection[in] Routes list. ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#Create"},
     {"title": "BrookURLRouter.TBrookURLRoute.Destroy", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#Destroy"},
     {"title": "BrookURLRouter.TBrookURLRoute.Validate", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#Validate"},
     {"title": "BrookURLRouter.TBrookURLRoute.PCRE2Handle", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#PCRE2Handle"},
     {"title": "BrookURLRouter.TBrookURLRoute.Segments", "text": " path levels).   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#Segments"},
     {"title": "BrookURLRouter.TBrookURLRoute.Variables", "text": " query-string parameters).   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#Variables"},
     {"title": "BrookURLRouter.TBrookURLRoute.RawPattern", "text": " For example, given a pattern /foo, the raw pattern is &circ;/foo$.   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#RawPattern"},
     {"title": "BrookURLRouter.TBrookURLRoute.Path", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#Path"},
     {"title": "BrookURLRouter.TBrookURLRoute.UserData", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#UserData"},
     {"title": "BrookURLRouter.TBrookURLRoute.Default", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#Default"},
     {"title": "BrookURLRouter.TBrookURLRoute.Pattern", "text": " It must be a valid regular expression in PCRE2 syntax.   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#Pattern"},
     {"title": "BrookURLRouter.TBrookURLRoute.Methods", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#Methods"},
     {"title": "BrookURLRouter.TBrookURLRoute.OnMath", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#OnMath"},
     {"title": "BrookURLRouter.TBrookURLRoute.OnRequestMethod", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#OnRequestMethod"},
     {"title": "BrookURLRouter.TBrookURLRoute.OnRequest", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoute.html#OnRequest"},
     {"title": "BrookURLRouter.TBrookURLRoutesEnumerator", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutesEnumerator.html"},
     {"title": "BrookURLRouter.TBrookURLRoutesEnumerator.GetCurrent", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutesEnumerator.html#GetCurrent"},
     {"title": "BrookURLRouter.TBrookURLRoutesEnumerator.Current", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutesEnumerator.html#Current"},
     {"title": "BrookURLRouter.EBrookURLRoutes", "text": "   ", "tags": "", "url": "BrookURLRouter.EBrookURLRoutes.html"},
     {"title": "BrookURLRouter.TBrookURLRoutes", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Create", "text": "   AOwner[in] Routes persistent. AOwner[in] Routes persistent. ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#Create"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Destroy", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#Destroy"},
     {"title": "BrookURLRouter.TBrookURLRoutes.GetRouterClass", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#GetRouterClass"},
     {"title": "BrookURLRouter.TBrookURLRoutes.GetEnumerator", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#GetEnumerator"},
     {"title": "BrookURLRouter.TBrookURLRoutes.NewPattern", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#NewPattern"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Add", "text": "     Route item.", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#Add"},
     {"title": "BrookURLRouter.TBrookURLRoutes.First", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#First"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Last", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#Last"},
     {"title": "BrookURLRouter.TBrookURLRoutes.IndexOf", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#IndexOf"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Find", "text": "   APattern[in] Route name. APattern[in] Route name. ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#Find"},
     {"title": "BrookURLRouter.TBrookURLRoutes.FindDefault", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#FindDefault"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Remove", "text": "   APattern[in] Route name. APattern[in] Route name. ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#Remove"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Clear", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#Clear"},
     {"title": "BrookURLRouter.TBrookURLRoutes.Items", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRoutes.html#Items"},
     {"title": "BrookURLRouter.TBrookURLRouter", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html"},
     {"title": "BrookURLRouter.TBrookURLRouter.Create", "text": "   AOwner[in] Owner component. AOwner[in] Owner component. ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Create"},
     {"title": "BrookURLRouter.TBrookURLRouter.Destroy", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Destroy"},
     {"title": "BrookURLRouter.TBrookURLRouter.GetEnumerator", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#GetEnumerator"},
     {"title": "BrookURLRouter.TBrookURLRouter.Add", "text": "     Route item.", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Add"},
     {"title": "BrookURLRouter.TBrookURLRouter.Remove", "text": "   APattern[in] Route name. APattern[in] Route name. ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Remove"},
     {"title": "BrookURLRouter.TBrookURLRouter.Clear", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Clear"},
     {"title": "BrookURLRouter.TBrookURLRouter.Open", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Open"},
     {"title": "BrookURLRouter.TBrookURLRouter.Close", "text": "    ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Close"},
     {"title": "BrookURLRouter.TBrookURLRouter.Route", "text": "      ASender[in] Sender object. APath[in] Route path. ARequest[in] Request object. AResponse[in] Response object. ASender[in] Sender object. APath[in] Route path. ARequest[in] Request object. AResponse[in] Response object. ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Route"},
     {"title": "BrookURLRouter.TBrookURLRouter.Route", "text": "     ASender[in] Sender object. ARequest[in] Request object. AResponse[in] Response object. ASender[in] Sender object. ARequest[in] Request object. AResponse[in] Response object. ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Route"},
     {"title": "BrookURLRouter.TBrookURLRouter.Items", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Items"},
     {"title": "BrookURLRouter.TBrookURLRouter.Active", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Active"},
     {"title": "BrookURLRouter.TBrookURLRouter.Routes", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#Routes"},
     {"title": "BrookURLRouter.TBrookURLRouter.OnRoute", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#OnRoute"},
     {"title": "BrookURLRouter.TBrookURLRouter.OnNotFound", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#OnNotFound"},
     {"title": "BrookURLRouter.TBrookURLRouter.OnActivate", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#OnActivate"},
     {"title": "BrookURLRouter.TBrookURLRouter.OnDeactivate", "text": "   ", "tags": "", "url": "BrookURLRouter.TBrookURLRouter.html#OnDeactivate"},
     {"title": "BrookURLRouter.SBrookInactiveRouter", "text": "   ", "tags": "", "url": "BrookURLRouter.html#SBrookInactiveRouter"},
     {"title": "BrookURLRouter.SBrookNoRoutesDefined", "text": "   ", "tags": "", "url": "BrookURLRouter.html#SBrookNoRoutesDefined"},
     {"title": "BrookURLRouter.SBrookEmptyRoutePattern", "text": "   ", "tags": "", "url": "BrookURLRouter.html#SBrookEmptyRoutePattern"},
     {"title": "BrookURLRouter.SBrookRouteAlreadyExists", "text": "   ", "tags": "", "url": "BrookURLRouter.html#SBrookRouteAlreadyExists"},
     {"title": "BrookURLRouter.SBrookRequestMethodNotAllowed", "text": "   ", "tags": "", "url": "BrookURLRouter.html#SBrookRequestMethodNotAllowed"},
     {"title": "BrookURLRouter.SBrookRequestNoMethodDefined", "text": "   ", "tags": "", "url": "BrookURLRouter.html#SBrookRequestNoMethodDefined"},
     {"title": "BrookURLRouter.SBrookRouteNotFound", "text": "   ", "tags": "", "url": "BrookURLRouter.html#SBrookRouteNotFound"},
     {"title": "BrookURLRouter.SBrookDefaultRouteAlreadyExists", "text": "   ", "tags": "", "url": "BrookURLRouter.html#SBrookDefaultRouteAlreadyExists"},
     {"title": "BrookURLRouter.TBrookURLRouteMatchEvent", "text": "    ", "tags": "", "url": "BrookURLRouter.html#TBrookURLRouteMatchEvent"},
     {"title": "BrookURLRouter.TBrookURLRouteRequestEvent", "text": "    ", "tags": "", "url": "BrookURLRouter.html#TBrookURLRouteRequestEvent"},
     {"title": "BrookURLRouter.TBrookURLRouteRequestMethodEvent", "text": "    ", "tags": "", "url": "BrookURLRouter.html#TBrookURLRouteRequestMethodEvent"},
     {"title": "BrookURLRouter.TBrookURLRouteClass", "text": "   ", "tags": "", "url": "BrookURLRouter.html#TBrookURLRouteClass"},
     {"title": "BrookURLRouter.TBrookURLRouterRouteEvent", "text": "    ", "tags": "", "url": "BrookURLRouter.html#TBrookURLRouterRouteEvent"},
     {"title": "BrookUtility", "text": "   ", "tags": "", "url": "BrookUtility.html"},
     {"title": "BrookUtility.TBrookLocker", "text": "   ", "tags": "", "url": "BrookUtility.TBrookLocker.html"},
     {"title": "BrookUtility.TBrookLocker.Create", "text": "    ", "tags": "", "url": "BrookUtility.TBrookLocker.html#Create"},
     {"title": "BrookUtility.TBrookLocker.Destroy", "text": "    ", "tags": "", "url": "BrookUtility.TBrookLocker.html#Destroy"},
     {"title": "BrookUtility.TBrookLocker.Lock", "text": "    ", "tags": "", "url": "BrookUtility.TBrookLocker.html#Lock"},
     {"title": "BrookUtility.TBrookLocker.Unlock", "text": "    ", "tags": "", "url": "BrookUtility.TBrookLocker.html#Unlock"},
     {"title": "BrookUtility.TBrookLocker.TryLock", "text": "    ", "tags": "", "url": "BrookUtility.TBrookLocker.html#TryLock"},
     {"title": "BrookUtility.TBrookLocker.Active", "text": " (Default: True)   ", "tags": "", "url": "BrookUtility.TBrookLocker.html#Active"},
     {"title": "BrookUtility.Sagui", "text": "   ", "tags": "", "url": "BrookUtility.Sagui.html"},
     {"title": "BrookUtility.Sagui.Version", "text": "     Library version packed into a single integer.", "tags": "", "url": "BrookUtility.Sagui.html#Version"},
     {"title": "BrookUtility.Sagui.Version", "text": "      AMajor[out] Major number. AMinor[out] Minor number. APatch[out] Patch number. AMajor[out] Major number. AMinor[out] Minor number. APatch[out] Patch number. Library version packed into a single integer.", "tags": "", "url": "BrookUtility.Sagui.html#Version"},
     {"title": "BrookUtility.Sagui.VersionStr", "text": "     Library version packed into a static string.", "tags": "", "url": "BrookUtility.Sagui.html#VersionStr"},
     {"title": "BrookUtility.Sagui.Malloc", "text": "    ASize[in] Memory size to be allocated. ASize[in] Memory size to be allocated. Pointer of the allocated zero-initialized memory.  Returns values:      nil   If size is 0 or no memory space.    ", "tags": "", "url": "BrookUtility.Sagui.html#Malloc"},
     {"title": "BrookUtility.Sagui.Alloc", "text": "    ASize[in] Memory size to be allocated. ASize[in] Memory size to be allocated. Pointer of the allocated zero-initialized memory.  Returns values:      nil   If size is 0 or no memory space.    ", "tags": "", "url": "BrookUtility.Sagui.html#Alloc"},
     {"title": "BrookUtility.Sagui.Realloc", "text": "     APointer[in] Pointer of the memory to be reallocated. ASize[in] Memory size to be allocated. APointer[in] Pointer of the memory to be reallocated. ASize[in] Memory size to be allocated. Pointer of the reallocated memory.", "tags": "", "url": "BrookUtility.Sagui.html#Realloc"},
     {"title": "BrookUtility.Sagui.Free", "text": "   APointer[in] Pointer of the memory to be freed. APointer[in] Pointer of the memory to be freed. ", "tags": "", "url": "BrookUtility.Sagui.html#Free"},
     {"title": "BrookUtility.Sagui.StrError", "text": "     AErrorNum[in] Error number. AErrorMsg[out] Referenced string to store the error message. AErrorLen[in] Length of the error message. AErrorNum[in] Error number. AErrorMsg[out] Referenced string to store the error message. AErrorLen[in] Length of the error message. ", "tags": "", "url": "BrookUtility.Sagui.html#StrError"},
     {"title": "BrookUtility.Sagui.StrError", "text": "    AErrorNum[in] Error number. AErrorNum[in] Error number. Static string describing the error.", "tags": "", "url": "BrookUtility.Sagui.html#StrError"},
     {"title": "BrookUtility.Sagui.IsPost", "text": "    AMethod[in] HTTP verb. AMethod[in] HTTP verb. True if given method is POST, PUT, DELETE or OPTIONS.", "tags": "", "url": "BrookUtility.Sagui.html#IsPost"},
     {"title": "BrookUtility.Sagui.ExtractEntryPoint", "text": " For example, given a path /api1/customer, the part considered as entry-point is /api1.    APath[in] Path as static string. APath[in] Path as static string. Entry-point as static string.", "tags": "", "url": "BrookUtility.Sagui.html#ExtractEntryPoint"},
     {"title": "BrookUtility.Sagui.TmpDir", "text": "     Temporary directory as static string.", "tags": "", "url": "BrookUtility.Sagui.html#TmpDir"},
     {"title": "BrookUtility.Sagui.EOR", "text": "    AError[in] True to return a value indicating a stream reading error. AError[in] True to return a value indicating a stream reading error. Value to end a stream reading.", "tags": "", "url": "BrookUtility.Sagui.html#EOR"},
     {"title": "BrookUtility.Sagui.IP", "text": "    ASocket[in] Socket handle. ASocket[in] Socket handle. Formatted IP into a string.", "tags": "", "url": "BrookUtility.Sagui.html#IP"},
     {"title": "BrookUtility.Brook", "text": "   ", "tags": "", "url": "BrookUtility.Brook.html"},
     {"title": "BrookUtility.Brook.DAYS", "text": "   ", "tags": "", "url": "BrookUtility.Brook.html#DAYS"},
     {"title": "BrookUtility.Brook.MONTHS", "text": "   ", "tags": "", "url": "BrookUtility.Brook.html#MONTHS"},
     {"title": "BrookUtility.Brook.FixPath", "text": "    APath[in] Path as static string. APath[in] Path as static string. Fixed path, e.g.: path -&gt; /path and /path/ -&gt; /path", "tags": "", "url": "BrookUtility.Brook.html#FixPath"},
     {"title": "BrookUtility.Brook.FixEntryPoint", "text": "    APath[in] Path as static string. APath[in] Path as static string. Fixed entry-point, e.g.: /foo/bar -&gt; /foo ", "tags": "", "url": "BrookUtility.Brook.html#FixEntryPoint"},
     {"title": "BrookUtility.Brook.DateTimeToUTC", "text": "    ADateTime[in] Local date/time. ADateTime[in] Local date/time. Local time converted to UTC.", "tags": "", "url": "BrookUtility.Brook.html#DateTimeToUTC"},
     {"title": "BrookUtility.Brook.DateTimeToGMT", "text": "    ADateTime[in] Local date/time. ADateTime[in] Local date/time. Local time converted to GMT string.", "tags": "", "url": "BrookUtility.Brook.html#DateTimeToGMT"},
     {"title": "BrookUtility.Brook.SHA1", "text": "    S[in] String to generate the SHA-1. S[in] String to generate the SHA-1. Generated SHA-1 as static string.", "tags": "", "url": "BrookUtility.Brook.html#SHA1"},
     {"title": "BrookUtility.TBrookHTTPRequestMethodHelper", "text": "   ", "tags": "", "url": "BrookUtility.TBrookHTTPRequestMethodHelper.html"},
     {"title": "BrookUtility.TBrookHTTPRequestMethodHelper.METHODS", "text": "   ", "tags": "", "url": "BrookUtility.TBrookHTTPRequestMethodHelper.html#METHODS"},
     {"title": "BrookUtility.TBrookHTTPRequestMethodHelper.ToString", "text": "    ", "tags": "", "url": "BrookUtility.TBrookHTTPRequestMethodHelper.html#ToString"},
     {"title": "BrookUtility.TBrookHTTPRequestMethodHelper.FromString", "text": "    ", "tags": "", "url": "BrookUtility.TBrookHTTPRequestMethodHelper.html#FromString"},
     {"title": "BrookUtility.tkPrimitives", "text": "   ", "tags": "", "url": "BrookUtility.html#tkPrimitives"},
     {"title": "BrookUtility.TBrookErrorEvent", "text": "    ASender[in] Sender object. AException[in] Exception object. ASender[in] Sender object. AException[in] Exception object. ", "tags": "", "url": "BrookUtility.html#TBrookErrorEvent"},
     {"title": "BrookUtility.TBrookHTTPRequestMethod", "text": "    rmUnknown    rmGET    rmPOST    rmPUT    rmDELETE    rmPATCH    rmOPTIONS    rmHEAD   ", "tags": "", "url": "BrookUtility.html#TBrookHTTPRequestMethod"},
     {"title": "BrookUtility.TBrookHTTPRequestMethods", "text": "   ", "tags": "", "url": "BrookUtility.html#TBrookHTTPRequestMethods"}
]};
